import pickle

import requests

import streamlit as st


def fetch_poster(movie_id):
    url = "https://api.themoviedb.org/3/movie/{}?api_key=8265bd1679663a7ea12ac168da84d2e8&language=en-US".format(
        movie_id)
    data = requests.get(url)
    data = data.json()
    poster_path = data['poster_path']
    full_path = "https://image.tmdb.org/t/p/w500/" + poster_path
    return full_path


def recommend(movie):
    index = movies[movies['title'] == movie].index[0]
    distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])
    recommended_movie_name = []
    recommended_movie_poster = []
    for i in distances[1:6]:
        # fetch the movie poster
        movie_id = movies.iloc[i[0]].movie_id
        recommended_movie_poster.append(fetch_poster(movie_id))
        recommended_movie_name.append(movies.iloc[i[0]].title)

    return recommended_movie_name, recommended_movie_poster


st.header('Movie Recommender System')
movies = pickle.load(open('movie_list.pkl', 'rb'))
similarity = pickle.load(open('similarity.pkl', 'rb'))

movie_list = movies['title'].values
selected_movie = st.selectbox(
    "Type or select a movie from the dropdown",
    movie_list
)

if st.button('Show Recommendation'):
    recommended_movie_names, recommended_movie_posters = recommend(selected_movie)
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        st.text(recommended_movie_names[0])
        st.image(recommended_movie_posters[0])
    with col2:
        st.text(recommended_movie_names[1])
        st.image(recommended_movie_posters[1])

    with col3:
        st.text(recommended_movie_names[2])
        st.image(recommended_movie_posters[2])
    with col4:
        st.text(recommended_movie_names[3])
        st.image(recommended_movie_posters[3])
    with col5:
        st.text(recommended_movie_names[4])
        st.image(recommended_movie_posters[4])


def calculate_f_measure(ground_truth, recommendations):
    true_positives = len(set(ground_truth) & set(recommendations))
    precision = true_positives / len(recommendations)
    recall = true_positives / len(ground_truth)
    f_measure = (2 * precision * recall) / (precision + recall)
    return f_measure

# Assuming you have the ground truth recommendations for a movie
ground_truth = ['Movie A', 'Movie B', 'Movie C', 'Movie D', 'Movie E']

# Assuming you have the recommendations generated by the movie recommender system
system_recommendations = ['Movie A', 'Movie D', 'Movie F', 'Movie G', 'Movie H']

# Calculate the F-measure
f_measure = calculate_f_measure(ground_truth, system_recommendations)

# Print the F-measure
print("F-measure:", f_measure)


def calculate_precision(ground_truth, recommendations):
    true_positives = len(set(ground_truth) & set(recommendations))
    precision: float = true_positives / len(recommendations)
    return precision

# Assuming you have the ground truth recommendations for a movie
ground_truth = ['Movie A', 'Movie B', 'Movie C', 'Movie D', 'Movie E']

# Assuming you have the recommendations generated by the movie recommender system
system_recommendations = ['Movie A', 'Movie D', 'Movie F', 'Movie G', 'Movie H']

# Calculate precision
precision = calculate_precision(ground_truth, system_recommendations)

# Print precision
print("Precision:", precision)

def calculate_recall(ground_truth, recommendations):
    true_positives = len(set(ground_truth) & set(recommendations))
    recall = true_positives / len(ground_truth)
    return recall

# Assuming you have the ground truth recommendations for a movie
ground_truth = ['Movie A', 'Movie B', 'Movie C', 'Movie D', 'Movie E']

# Assuming you have the recommendations generated by the movie recommender system
system_recommendations = ['Movie A', 'Movie D', 'Movie F', 'Movie G', 'Movie H']

# Calculate recall
recall = calculate_recall(ground_truth, system_recommendations)

# Print recall
print("Recall:", recall)
